Overview
========

Our STADLE platform is a paradigm-shifting technology for adaptive and continuous learning combining privacy-preserving Machine Learning (ML) and decentralized system capability to provide scalable, versatile, and secure AI services. STADLE platform stands for Scalable, Traceable, Adaptive, Distributed LEarning platform.

Federated Learning (FL) solves the problems of privacy and communication load, which commonly appear in ML systems. FL does not require users to upload raw data to cloud servers.

* Privacy: FL improves the privacy-preserving aspect of AI systems by not collecting data in the cloud while producing collective intelligence based on uploaded user ML models.
* Communication load: The amount of traffic generated by FL dramatically decreases from classical AI systems due to the difference in data type exchanged.

Our STADLE platform enhances the capability of FL by incorporating decentralized architecture.

* Scalability: Decentralized FL servers in STADLE realizes the load-balancing to accommodate more users.
* 5G-friendliness: The delay in communication to obtain collective intelligence can be dramatically reduced by employing decentralized FL servers located at edge servers.
* Traceability: Our platform has the performance tracking capability that monitors and manages the transition of collective intelligence models in the decentralized system.

General Terminologies
*********************

There are 3 main components in STADLE.

- Persistence-server

  - A core functionality which helps in keeping track of various database entries.
  - Packaged as a command inside `stadle` library.
  - `stadle persistence-server [args]`

- Aggregator

  - A core functionality which helps aggregation process.
  - Packaged as a command inside `stadle` library.
    - `stadle aggregator [args]`

- Client

  - A core functionality which helps executing the machine learning code from client side.
  - Packaged inside `stadle` library as a class.
    - `from stadle import BasicClient`
    - `class BasicClient` is used to let `stadle` know that the following code is going to be ML.

- Agent

  - In charge of communicating with `stadle` core functions.
  - Let's `stadle` know which agent is trying to aceess and perform actions.
  - Helpful in restricting access to malicious actors.

Ready to get started? Great! Click here for installation steps.
